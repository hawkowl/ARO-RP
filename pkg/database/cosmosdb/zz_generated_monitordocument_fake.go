// Code generated by github.com/jim-minter/go-cosmosdb, DO NOT EDIT.

package cosmosdb

import (
	"context"
	"fmt"
	"net/http"
	"sync"

	"github.com/ugorji/go/codec"

	pkg "github.com/Azure/ARO-RP/pkg/api"
)

type fakeMonitorDocumentTriggerHandler func(context.Context, *pkg.MonitorDocument) error
type fakeMonitorDocumentQueryHandler func(MonitorDocumentClient, *Query, *Options) MonitorDocumentRawIterator

var _ MonitorDocumentClient = &FakeMonitorDocumentClient{}

// NewFakeMonitorDocumentClient returns a FakeMonitorDocumentClient
func NewFakeMonitorDocumentClient(h *codec.JsonHandle) *FakeMonitorDocumentClient {
	return &FakeMonitorDocumentClient{
		monitorDocuments: make(map[string][]byte),
		triggerHandlers:  make(map[string]fakeMonitorDocumentTriggerHandler),
		queryHandlers:    make(map[string]fakeMonitorDocumentQueryHandler),
		jsonHandle:       h,
		lock:             &sync.RWMutex{},
	}
}

// FakeMonitorDocumentClient is a FakeMonitorDocumentClient
type FakeMonitorDocumentClient struct {
	monitorDocuments map[string][]byte
	jsonHandle       *codec.JsonHandle
	lock             *sync.RWMutex
	triggerHandlers  map[string]fakeMonitorDocumentTriggerHandler
	queryHandlers    map[string]fakeMonitorDocumentQueryHandler
	sorter           func([]*pkg.MonitorDocument)

	// returns true if documents conflict
	conflictChecker func(*pkg.MonitorDocument, *pkg.MonitorDocument) bool

	// err, if not nil, is an error to return when attempting to communicate
	// with this Client
	err error
}

func (c *FakeMonitorDocumentClient) decodeMonitorDocument(s []byte) (monitorDocument *pkg.MonitorDocument, err error) {
	err = codec.NewDecoderBytes(s, c.jsonHandle).Decode(&monitorDocument)
	return
}

func (c *FakeMonitorDocumentClient) encodeMonitorDocument(monitorDocument *pkg.MonitorDocument) (b []byte, err error) {
	err = codec.NewEncoderBytes(&b, c.jsonHandle).Encode(monitorDocument)
	return
}

// SetError sets or unsets an error that will be returned on any
// FakeMonitorDocumentClient method invocation
func (c *FakeMonitorDocumentClient) SetError(err error) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.err = err
}

// SetSorter sets or unsets a sorter function which will be used to sort values
// returned by List() for test stability
func (c *FakeMonitorDocumentClient) SetSorter(sorter func([]*pkg.MonitorDocument)) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.sorter = sorter
}

// SetConflictChecker sets or unsets a function which can be used to validate
// additional unique keys in a MonitorDocument
func (c *FakeMonitorDocumentClient) SetConflictChecker(conflictChecker func(*pkg.MonitorDocument, *pkg.MonitorDocument) bool) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.conflictChecker = conflictChecker
}

// SetTriggerHandler sets or unsets a trigger handler
func (c *FakeMonitorDocumentClient) SetTriggerHandler(triggerName string, trigger fakeMonitorDocumentTriggerHandler) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.triggerHandlers[triggerName] = trigger
}

// SetQueryHandler sets or unsets a query handler
func (c *FakeMonitorDocumentClient) SetQueryHandler(queryName string, query fakeMonitorDocumentQueryHandler) {
	c.lock.Lock()
	defer c.lock.Unlock()

	c.queryHandlers[queryName] = query
}

func (c *FakeMonitorDocumentClient) deepCopy(monitorDocument *pkg.MonitorDocument) (*pkg.MonitorDocument, error) {
	b, err := c.encodeMonitorDocument(monitorDocument)
	if err != nil {
		return nil, err
	}

	return c.decodeMonitorDocument(b)
}

func (c *FakeMonitorDocumentClient) apply(ctx context.Context, partitionkey string, monitorDocument *pkg.MonitorDocument, options *Options, isCreate bool) (*pkg.MonitorDocument, error) {
	c.lock.Lock()
	defer c.lock.Unlock()

	if c.err != nil {
		return nil, c.err
	}

	monitorDocument, err := c.deepCopy(monitorDocument) // copy now because pretriggers can mutate monitorDocument
	if err != nil {
		return nil, err
	}

	if options != nil {
		err := c.processPreTriggers(ctx, monitorDocument, options)
		if err != nil {
			return nil, err
		}
	}

	_, exists := c.monitorDocuments[monitorDocument.ID]
	if isCreate && exists {
		return nil, &Error{
			StatusCode: http.StatusConflict,
			Message:    "Entity with the specified id already exists in the system",
		}
	}
	if !isCreate && !exists {
		return nil, &Error{StatusCode: http.StatusNotFound}
	}

	if c.conflictChecker != nil {
		for id := range c.monitorDocuments {
			monitorDocumentToCheck, err := c.decodeMonitorDocument(c.monitorDocuments[id])
			if err != nil {
				return nil, err
			}

			if c.conflictChecker(monitorDocumentToCheck, monitorDocument) {
				return nil, &Error{
					StatusCode: http.StatusConflict,
					Message:    "Entity with the specified id already exists in the system",
				}
			}
		}
	}

	b, err := c.encodeMonitorDocument(monitorDocument)
	if err != nil {
		return nil, err
	}

	c.monitorDocuments[monitorDocument.ID] = b

	return monitorDocument, nil
}

// Create creates a MonitorDocument in the database
func (c *FakeMonitorDocumentClient) Create(ctx context.Context, partitionkey string, monitorDocument *pkg.MonitorDocument, options *Options) (*pkg.MonitorDocument, error) {
	return c.apply(ctx, partitionkey, monitorDocument, options, true)
}

// Replace replaces a MonitorDocument in the database
func (c *FakeMonitorDocumentClient) Replace(ctx context.Context, partitionkey string, monitorDocument *pkg.MonitorDocument, options *Options) (*pkg.MonitorDocument, error) {
	return c.apply(ctx, partitionkey, monitorDocument, options, false)
}

// List returns a MonitorDocumentIterator to list all MonitorDocuments in the database
func (c *FakeMonitorDocumentClient) List(*Options) MonitorDocumentIterator {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return NewFakeMonitorDocumentErroringRawIterator(c.err)
	}

	monitorDocuments := make([]*pkg.MonitorDocument, 0, len(c.monitorDocuments))
	for _, d := range c.monitorDocuments {
		r, err := c.decodeMonitorDocument(d)
		if err != nil {
			return NewFakeMonitorDocumentErroringRawIterator(err)
		}
		monitorDocuments = append(monitorDocuments, r)
	}

	if c.sorter != nil {
		c.sorter(monitorDocuments)
	}

	return NewFakeMonitorDocumentIterator(monitorDocuments, 0)
}

// ListAll lists all MonitorDocuments in the database
func (c *FakeMonitorDocumentClient) ListAll(ctx context.Context, options *Options) (*pkg.MonitorDocuments, error) {
	iter := c.List(options)
	return iter.Next(ctx, -1)
}

// Get gets a MonitorDocument from the database
func (c *FakeMonitorDocumentClient) Get(ctx context.Context, partitionkey string, id string, options *Options) (*pkg.MonitorDocument, error) {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return nil, c.err
	}

	monitorDocument, exists := c.monitorDocuments[id]
	if !exists {
		return nil, &Error{StatusCode: http.StatusNotFound}
	}

	return c.decodeMonitorDocument(monitorDocument)
}

// Delete deletes a MonitorDocument from the database
func (c *FakeMonitorDocumentClient) Delete(ctx context.Context, partitionKey string, monitorDocument *pkg.MonitorDocument, options *Options) error {
	c.lock.Lock()
	defer c.lock.Unlock()

	if c.err != nil {
		return c.err
	}

	_, exists := c.monitorDocuments[monitorDocument.ID]
	if !exists {
		return &Error{StatusCode: http.StatusNotFound}
	}

	delete(c.monitorDocuments, monitorDocument.ID)
	return nil
}

// ChangeFeed is unimplemented
func (c *FakeMonitorDocumentClient) ChangeFeed(*Options) MonitorDocumentIterator {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return NewFakeMonitorDocumentErroringRawIterator(c.err)
	}

	return NewFakeMonitorDocumentErroringRawIterator(ErrNotImplemented)
}

func (c *FakeMonitorDocumentClient) processPreTriggers(ctx context.Context, monitorDocument *pkg.MonitorDocument, options *Options) error {
	for _, triggerName := range options.PreTriggers {
		if triggerHandler := c.triggerHandlers[triggerName]; triggerHandler != nil {
			err := triggerHandler(ctx, monitorDocument)
			if err != nil {
				return err
			}
		} else {
			return ErrNotImplemented
		}
	}

	return nil
}

// Query calls a query handler to implement database querying
func (c *FakeMonitorDocumentClient) Query(name string, query *Query, options *Options) MonitorDocumentRawIterator {
	c.lock.RLock()
	defer c.lock.RUnlock()

	if c.err != nil {
		return NewFakeMonitorDocumentErroringRawIterator(c.err)
	}

	if queryHandler := c.queryHandlers[query.Query]; queryHandler != nil {
		return queryHandler(c, query, options)
	}

	return NewFakeMonitorDocumentErroringRawIterator(ErrNotImplemented)
}

// QueryAll calls a query handler to implement database querying
func (c *FakeMonitorDocumentClient) QueryAll(ctx context.Context, partitionkey string, query *Query, options *Options) (*pkg.MonitorDocuments, error) {
	iter := c.Query("", query, options)
	return iter.Next(ctx, -1)
}

func NewFakeMonitorDocumentIterator(monitorDocuments []*pkg.MonitorDocument, continuation int) MonitorDocumentRawIterator {
	return &fakeMonitorDocumentIterator{monitorDocuments: monitorDocuments, continuation: continuation}
}

type fakeMonitorDocumentIterator struct {
	monitorDocuments []*pkg.MonitorDocument
	continuation     int
	done             bool
}

func (i *fakeMonitorDocumentIterator) NextRaw(ctx context.Context, maxItemCount int, out interface{}) error {
	return ErrNotImplemented
}

func (i *fakeMonitorDocumentIterator) Next(ctx context.Context, maxItemCount int) (*pkg.MonitorDocuments, error) {
	if i.done {
		return nil, nil
	}

	var monitorDocuments []*pkg.MonitorDocument
	if maxItemCount == -1 {
		monitorDocuments = i.monitorDocuments[i.continuation:]
		i.continuation = len(i.monitorDocuments)
		i.done = true
	} else {
		max := i.continuation + maxItemCount
		if max > len(i.monitorDocuments) {
			max = len(i.monitorDocuments)
		}
		monitorDocuments = i.monitorDocuments[i.continuation:max]
		i.continuation += max
		i.done = i.Continuation() == ""
	}

	return &pkg.MonitorDocuments{
		MonitorDocuments: monitorDocuments,
		Count:            len(monitorDocuments),
	}, nil
}

func (i *fakeMonitorDocumentIterator) Continuation() string {
	if i.continuation >= len(i.monitorDocuments) {
		return ""
	}
	return fmt.Sprintf("%d", i.continuation)
}

// NewFakeMonitorDocumentErroringRawIterator returns a MonitorDocumentRawIterator which
// whose methods return the given error
func NewFakeMonitorDocumentErroringRawIterator(err error) MonitorDocumentRawIterator {
	return &fakeMonitorDocumentErroringRawIterator{err: err}
}

type fakeMonitorDocumentErroringRawIterator struct {
	err error
}

func (i *fakeMonitorDocumentErroringRawIterator) Next(ctx context.Context, maxItemCount int) (*pkg.MonitorDocuments, error) {
	return nil, i.err
}

func (i *fakeMonitorDocumentErroringRawIterator) NextRaw(context.Context, int, interface{}) error {
	return i.err
}

func (i *fakeMonitorDocumentErroringRawIterator) Continuation() string {
	return ""
}
