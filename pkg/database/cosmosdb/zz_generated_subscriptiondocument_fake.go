// Code generated by github.com/jim-minter/go-cosmosdb, DO NOT EDIT.

package cosmosdb

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"net/http"
	"sync"

	"github.com/ugorji/go/codec"

	pkg "github.com/Azure/ARO-RP/pkg/api"
)

type FakeSubscriptionDocumentTrigger func(context.Context, *pkg.SubscriptionDocument) error
type FakeSubscriptionDocumentQuery func(SubscriptionDocumentClient, *Query, *Options) SubscriptionDocumentRawIterator

var _ SubscriptionDocumentClient = &FakeSubscriptionDocumentClient{}

func NewFakeSubscriptionDocumentClient(h *codec.JsonHandle, uniqueKeys []string) *FakeSubscriptionDocumentClient {
	return &FakeSubscriptionDocumentClient{
		docs:       make(map[string][]byte),
		triggers:   make(map[string]FakeSubscriptionDocumentTrigger),
		queries:    make(map[string]FakeSubscriptionDocumentQuery),
		uniqueKeys: uniqueKeys,
		jsonHandle: h,
		lock:       &sync.RWMutex{},
		sorter:     func(in []*pkg.SubscriptionDocument) {},
	}
}

type FakeSubscriptionDocumentClient struct {
	docs       map[string][]byte
	jsonHandle *codec.JsonHandle
	lock       *sync.RWMutex
	triggers   map[string]FakeSubscriptionDocumentTrigger
	queries    map[string]FakeSubscriptionDocumentQuery
	uniqueKeys []string
	sorter     func([]*pkg.SubscriptionDocument)

	// unavailable, if not nil, is an error to throw when attempting to
	// communicate with this Client
	unavailable error
}

func decodeSubscriptionDocument(s []byte, handle *codec.JsonHandle) (*pkg.SubscriptionDocument, error) {
	res := &pkg.SubscriptionDocument{}
	err := codec.NewDecoder(bytes.NewBuffer(s), handle).Decode(&res)
	return res, err
}

func decodeSubscriptionDocumentToMap(s []byte, handle *codec.JsonHandle) (map[interface{}]interface{}, error) {
	var res interface{}
	err := codec.NewDecoder(bytes.NewBuffer(s), handle).Decode(&res)
	if err != nil {
		return nil, err
	}
	ret, ok := res.(map[interface{}]interface{})
	if !ok {
		return nil, errors.New("Could not coerce")
	}
	return ret, err
}

func encodeSubscriptionDocument(doc *pkg.SubscriptionDocument, handle *codec.JsonHandle) (res []byte, err error) {
	buf := &bytes.Buffer{}
	err = codec.NewEncoder(buf, handle).Encode(doc)
	if err != nil {
		return
	}
	res = buf.Bytes()
	return
}

func (c *FakeSubscriptionDocumentClient) MakeUnavailable(err error) {
	c.unavailable = err
}

func (c *FakeSubscriptionDocumentClient) UseSorter(sorter func([]*pkg.SubscriptionDocument)) {
	c.sorter = sorter
}

func (c *FakeSubscriptionDocumentClient) encodeAndCopy(doc *pkg.SubscriptionDocument) (*pkg.SubscriptionDocument, []byte, error) {
	encoded, err := encodeSubscriptionDocument(doc, c.jsonHandle)
	if err != nil {
		return nil, nil, err
	}
	res, err := decodeSubscriptionDocument(encoded, c.jsonHandle)
	if err != nil {
		return nil, nil, err
	}
	return res, encoded, err
}

func (c *FakeSubscriptionDocumentClient) Create(ctx context.Context, partitionkey string, doc *pkg.SubscriptionDocument, options *Options) (*pkg.SubscriptionDocument, error) {
	if c.unavailable != nil {
		return nil, c.unavailable
	}
	c.lock.Lock()
	defer c.lock.Unlock()

	if options != nil {
		err := c.processPreTriggers(ctx, doc, options)
		if err != nil {
			return nil, err
		}
	}

	res, enc, err := c.encodeAndCopy(doc)
	if err != nil {
		return nil, err
	}
	docAsMap, err := decodeSubscriptionDocumentToMap(enc, c.jsonHandle)
	if err != nil {
		return nil, err
	}

	for _, ext := range c.docs {
		extDecoded, err := decodeSubscriptionDocumentToMap(ext, c.jsonHandle)
		if err != nil {
			return nil, err
		}

		for _, key := range c.uniqueKeys {
			var ourKeyStr string
			var theirKeyStr string
			ourKey, ourKeyOk := docAsMap[key]
			if ourKeyOk {
				ourKeyStr, ourKeyOk = ourKey.(string)
			}
			theirKey, theirKeyOk := extDecoded[key]
			if theirKeyOk {
				theirKeyStr, theirKeyOk = theirKey.(string)
			}
			if ourKeyOk && theirKeyOk && ourKeyStr != "" && ourKeyStr == theirKeyStr {
				return nil, &Error{
					StatusCode: http.StatusConflict,
					Message:    "Entity with the specified id already exists in the system",
				}
			}
		}
	}

	c.docs[doc.ID] = enc
	return res, nil
}

func (c *FakeSubscriptionDocumentClient) List(*Options) SubscriptionDocumentIterator {
	if c.unavailable != nil {
		return NewFakeSubscriptionDocumentClientErroringRawIterator(c.unavailable)
	}
	c.lock.RLock()
	defer c.lock.RUnlock()

	docs := make([]*pkg.SubscriptionDocument, 0, len(c.docs))
	for _, d := range c.docs {
		r, err := decodeSubscriptionDocument(d, c.jsonHandle)
		if err != nil {
			return NewFakeSubscriptionDocumentClientErroringRawIterator(err)
		}
		docs = append(docs, r)
	}
	c.sorter(docs)
	return NewFakeSubscriptionDocumentClientRawIterator(docs, 0)
}

func (c *FakeSubscriptionDocumentClient) ListAll(context.Context, *Options) (*pkg.SubscriptionDocuments, error) {
	if c.unavailable != nil {
		return nil, c.unavailable
	}
	c.lock.RLock()
	defer c.lock.RUnlock()

	subscriptionDocuments := &pkg.SubscriptionDocuments{
		Count:                 len(c.docs),
		SubscriptionDocuments: make([]*pkg.SubscriptionDocument, 0, len(c.docs)),
	}

	for _, d := range c.docs {
		dec, err := decodeSubscriptionDocument(d, c.jsonHandle)
		if err != nil {
			return nil, err
		}
		subscriptionDocuments.SubscriptionDocuments = append(subscriptionDocuments.SubscriptionDocuments, dec)
	}
	c.sorter(subscriptionDocuments.SubscriptionDocuments)
	return subscriptionDocuments, nil
}

func (c *FakeSubscriptionDocumentClient) Get(ctx context.Context, partitionkey string, documentId string, options *Options) (*pkg.SubscriptionDocument, error) {
	if c.unavailable != nil {
		return nil, c.unavailable
	}
	c.lock.RLock()
	defer c.lock.RUnlock()

	out, ext := c.docs[documentId]
	if !ext {
		return nil, &Error{StatusCode: http.StatusNotFound}
	}
	return decodeSubscriptionDocument(out, c.jsonHandle)
}

func (c *FakeSubscriptionDocumentClient) Replace(ctx context.Context, partitionkey string, doc *pkg.SubscriptionDocument, options *Options) (*pkg.SubscriptionDocument, error) {
	if c.unavailable != nil {
		return nil, c.unavailable
	}
	c.lock.Lock()
	defer c.lock.Unlock()

	_, exists := c.docs[doc.ID]
	if !exists {
		return nil, &Error{StatusCode: http.StatusNotFound}
	}

	if options != nil {
		err := c.processPreTriggers(ctx, doc, options)
		if err != nil {
			return nil, err
		}
	}

	res, enc, err := c.encodeAndCopy(doc)
	if err != nil {
		return nil, err
	}
	c.docs[doc.ID] = enc
	return res, nil
}

func (c *FakeSubscriptionDocumentClient) Delete(ctx context.Context, partitionKey string, doc *pkg.SubscriptionDocument, options *Options) error {
	if c.unavailable != nil {
		return c.unavailable
	}
	c.lock.Lock()
	defer c.lock.Unlock()

	_, ext := c.docs[doc.ID]
	if !ext {
		return &Error{StatusCode: http.StatusNotFound}
	}

	delete(c.docs, doc.ID)
	return nil
}

func (c *FakeSubscriptionDocumentClient) ChangeFeed(*Options) SubscriptionDocumentIterator {
	if c.unavailable != nil {
		return NewFakeSubscriptionDocumentClientErroringRawIterator(c.unavailable)
	}
	return NewFakeSubscriptionDocumentClientErroringRawIterator(ErrNotImplemented)
}

func (c *FakeSubscriptionDocumentClient) processPreTriggers(ctx context.Context, doc *pkg.SubscriptionDocument, options *Options) error {
	for _, trigger := range options.PreTriggers {
		trig, ok := c.triggers[trigger]
		if ok {
			err := trig(ctx, doc)
			if err != nil {
				return err
			}
		} else {
			return ErrNotImplemented
		}
	}
	return nil
}

func (c *FakeSubscriptionDocumentClient) Query(name string, query *Query, options *Options) SubscriptionDocumentRawIterator {
	if c.unavailable != nil {
		return NewFakeSubscriptionDocumentClientErroringRawIterator(c.unavailable)
	}
	c.lock.RLock()
	defer c.lock.RUnlock()

	quer, ok := c.queries[query.Query]
	if ok {
		return quer(c, query, options)
	} else {
		return NewFakeSubscriptionDocumentClientErroringRawIterator(ErrNotImplemented)
	}
}

func (c *FakeSubscriptionDocumentClient) QueryAll(ctx context.Context, partitionkey string, query *Query, options *Options) (*pkg.SubscriptionDocuments, error) {
	if c.unavailable != nil {
		return nil, c.unavailable
	}
	c.lock.RLock()
	defer c.lock.RUnlock()

	quer, ok := c.queries[query.Query]
	if ok {
		items := quer(c, query, options)
		res := &pkg.SubscriptionDocuments{}
		err := items.NextRaw(ctx, -1, res)
		return res, err
	} else {
		return nil, ErrNotImplemented
	}
}

func (c *FakeSubscriptionDocumentClient) InjectTrigger(trigger string, impl FakeSubscriptionDocumentTrigger) {
	c.triggers[trigger] = impl
}

func (c *FakeSubscriptionDocumentClient) InjectQuery(query string, impl FakeSubscriptionDocumentQuery) {
	c.queries[query] = impl
}

// NewFakeSubscriptionDocumentClientRawIterator creates a RawIterator that will produce only
// SubscriptionDocuments from Next() and NextRaw().
func NewFakeSubscriptionDocumentClientRawIterator(docs []*pkg.SubscriptionDocument, continuation int) SubscriptionDocumentRawIterator {
	return &fakeSubscriptionDocumentClientRawIterator{docs: docs, continuation: continuation}
}

type fakeSubscriptionDocumentClientRawIterator struct {
	docs         []*pkg.SubscriptionDocument
	continuation int
}

func (i *fakeSubscriptionDocumentClientRawIterator) Next(ctx context.Context, maxItemCount int) (*pkg.SubscriptionDocuments, error) {
	out := &pkg.SubscriptionDocuments{}
	err := i.NextRaw(ctx, maxItemCount, out)

	if out.Count == 0 {
		return nil, nil
	}
	return out, err
}

func (i *fakeSubscriptionDocumentClientRawIterator) NextRaw(ctx context.Context, maxItemCount int, out interface{}) error {
	if i.continuation >= len(i.docs) {
		return nil
	}

	var docs []*pkg.SubscriptionDocument
	if maxItemCount == -1 {
		docs = i.docs[i.continuation:]
		i.continuation = len(i.docs)
	} else {
		max := i.continuation + maxItemCount
		if max > len(i.docs) {
			max = len(i.docs)
		}
		docs = i.docs[i.continuation:max]
		i.continuation += max
	}

	d := out.(*pkg.SubscriptionDocuments)
	d.SubscriptionDocuments = docs
	d.Count = len(d.SubscriptionDocuments)
	return nil
}

func (i *fakeSubscriptionDocumentClientRawIterator) Continuation() string {
	if i.continuation >= len(i.docs) {
		return ""
	}
	return fmt.Sprintf("%d", i.continuation)
}

// fakeSubscriptionDocumentErroringRawIterator is a RawIterator that will return an error on use.
func NewFakeSubscriptionDocumentClientErroringRawIterator(err error) *fakeSubscriptionDocumentErroringRawIterator {
	return &fakeSubscriptionDocumentErroringRawIterator{err: err}
}

type fakeSubscriptionDocumentErroringRawIterator struct {
	err error
}

func (i *fakeSubscriptionDocumentErroringRawIterator) Next(ctx context.Context, maxItemCount int) (*pkg.SubscriptionDocuments, error) {
	return nil, i.err
}

func (i *fakeSubscriptionDocumentErroringRawIterator) NextRaw(context.Context, int, interface{}) error {
	return i.err
}

func (i *fakeSubscriptionDocumentErroringRawIterator) Continuation() string {
	return ""
}
